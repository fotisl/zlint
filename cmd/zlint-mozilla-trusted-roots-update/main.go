/*
 * ZLint Copyright 2018 Regents of the University of Michigan
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package main

import (
	"bufio"
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"flag"
	"fmt"
	"go/format"
	"io"
	"net"
	"net/http"
	"os"
	"strconv"
	"strings"
	"text/template"
	"time"

	log "github.com/sirupsen/logrus"
	"github.com/zmap/zcrypto/x509"
)

const MOZILLA_CERTDATA = "http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt?raw=1"

var (
	// httpClient is a http.Client instance configured with timeouts.
	httpClient = &http.Client{
		Transport: &http.Transport{
			Dial: (&net.Dialer{
				Timeout:   15 * time.Second,
				KeepAlive: 15 * time.Second,
			}).Dial,
			TLSHandshakeTimeout:   5 * time.Second,
			ResponseHeaderTimeout: 5 * time.Second,
			ExpectContinueTimeout: 1 * time.Second,
		},
	}
	// mozillaTrustedRootsTemplate is a template that produces a Golang source
	// code file in the "util" package containing a single member variable,
	// a slice of strings containing the hex encoded SPKIs of all roots
	// trusted by Mozilla.
	mozillaTrustedRootsTemplate = template.Must(template.New(
		"mozillaTrustedRootsTemplate").Parse(
		`// Code generated by go generate; DO NOT EDIT.
// This file was generated by zlint-mozilla-trusted-roots-update.

/*
 * ZLint Copyright 2018 Regents of the University of Michigan
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package util

var mozillaTrustedSPKIs = []string{
{{- range . }}
	"{{ . }}",
{{- end }}
}
`))
)

func getMozillaTrustedCerts() ([]*x509.Certificate, error) {
	resp, err := httpClient.Get(MOZILLA_CERTDATA)
	if err != nil {
		return nil, fmt.Errorf("unable to fetch data from %q : %s",
			MOZILLA_CERTDATA, err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code fetching data "+
			"from %q : expected status %d got %d",
			MOZILLA_CERTDATA, http.StatusOK, resp.StatusCode)
	}

	var trustedCertificates []*x509.Certificate
	scanner := bufio.NewScanner(resp.Body)
	for scanner.Scan() {
		line := scanner.Text()
		line = strings.ReplaceAll(line, "\r\n", "")
		if line == "CKA_VALUE MULTILINE_OCTAL" {
			var certdata []byte

			for scanner.Scan() {
				line = scanner.Text()
				line = strings.ReplaceAll(line, "\r\n", "")

				if line == "END" {
					break
				}

				bs := strings.Split(line, "\\")
				for _, b := range bs {
					if b == "" {
						continue
					}
					i, err := strconv.ParseInt(b, 8, 0)
					if err != nil {
						return nil, fmt.Errorf(
							"unexpected octal character : %s", err)
					}
					certdata = append(certdata, byte(i))
				}
			}

			cert, err := x509.ParseCertificate(certdata)
			if err != nil {
				return nil, fmt.Errorf("unable to parse certificate : %s", err)
			}

			trustedCertificates = append(trustedCertificates, cert)
		}
	}

	return trustedCertificates, nil
}

func renderMozillaTrustedSPKIs(writer io.Writer) error {
	trustedCerts, err := getMozillaTrustedCerts()
	if err != nil {
		return err
	}

	var trustedSPKIs []string
	for _, c := range trustedCerts {
		spki := sha256.Sum256(c.RawSubjectPublicKeyInfo)
		trustedSPKIs = append(trustedSPKIs, hex.EncodeToString(spki[:]))
	}

	var buf bytes.Buffer
	if err := mozillaTrustedRootsTemplate.Execute(&buf, trustedSPKIs); err != nil {
		return err
	}

	// format the buffer so it won't trip up the `gofmt_test.go` checks
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	// Write the formatted buffer to the writer
	_, err = writer.Write(formatted)
	if err != nil {
		return err
	}
	return nil
}

// init sets up command line flags
func init() {
	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage: %s [flags]\n", os.Args[0])
		flag.PrintDefaults()
	}
	flag.Parse()
	log.SetLevel(log.InfoLevel)
}

// main handles rendering the mozilla trusted SPKIs to either standard out
// (when no argument is provided) or to the provided filename. If an error
// occurs it is printed to standard err and the program terminates with a
// non-zero exit status.
func main() {
	errQuit := func(err error) {
		fmt.Fprintf(os.Stderr, "error updating mozilla trusted SPKIs: %s\n", err)
		os.Exit(1)
	}

	// Default to writing to standard out
	writer := os.Stdout
	if flag.NArg() > 0 {
		// If a filename is specified as a command line flag then open it (creating
		// if needed), truncate the existing contents, and use the file as the
		// writer instead of standard out
		filename := flag.Args()[0]
		f, err := os.OpenFile(filename, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0664)
		if err != nil {
			errQuit(err)
		}
		defer f.Close()
		writer = f
	}

	if err := renderMozillaTrustedSPKIs(writer); err != nil {
		errQuit(err)
	}
}
